{
  "hash": "c1b979832f8bb8d96149228d7a1e6bc4",
  "result": {
    "markdown": "---\ntitle: \"Python Dash: Making interactive presentations\"\ndate: \"04/01/2024\"\nauthor: Yava Vilar Valera\n---\n\n\nPython Dash, developed by Plotly, allows you to create interactive web applications and visualize data. I learned how to make this kind of presentation during the first year of my Master. Below you will find an example of a coded model using a given database on the sales of a company along with its resulting outputs, which, when executed with Python, provide interactive and dynamic graphics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport dash \nfrom dash import Input, Output, html, callback, dcc\nimport dash_bootstrap_components as dbc\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\nfrom calendar import month_abbr, month_name\nimport plotly.express as px\nfrom dash import dash_table\n\n#Télécharger la base de données \ndf = pd.read_csv(\"C:/Users/yavav/Downloads/data (1).csv\", index_col=0)\n\n#Traitement des données\ndf = df[['CustomerID', 'Gender', 'Location', 'Product_Category', 'Quantity', 'Avg_Price', 'Transaction_Date', 'Month', 'Discount_pct']]\n\ndf['CustomerID'] = df['CustomerID'].fillna(0).astype(int)\ndf['Transaction_Date'] = pd.to_datetime(df['Transaction_Date'])\n\ndf['Total_price'] = df['Quantity'] * df['Avg_Price'] * (1 - (df['Discount_pct'] / 100)).round(3)\n\n#Création de la table des 100 dernières ventes\ndef table_ventes(data):\n    table_ventes = data[['Transaction_Date', 'Gender', 'Location', 'Product_Category', 'Quantity', 'Avg_Price', 'Discount_pct']].copy()\n    table_ventes['Date'] = table_ventes['Transaction_Date'].dt.date\n    table_ventes = table_ventes[['Date', 'Gender', 'Location', 'Product_Category', 'Quantity', 'Avg_Price', 'Discount_pct']]\n    table_ventes = table_ventes.sort_values(by='Date', ascending=False).head(100)\n    return table_ventes.to_dict('records')\n   \ncolonnes = [\n    {'name': 'Transaction_Date', 'id': 'Transaction_Date'},\n    {'name': 'Gender', 'id': 'Gender'},\n    {'name': 'Location', 'id': 'Location'},\n    {'name': 'Product_Category', 'id': 'Product Category'},\n    {'name': 'Quantity', 'id': 'Quantity'},\n    {'name': 'Avg_Price', 'id': 'Avg_Price'},\n    {'name': 'Discount_pct', 'id': 'Discount_pct'}\n]\n\n#Définition des fonctions qui seront ensuites appelées\ndef calculer_chiffre_affaire(data):\n    return data['Total_price'].sum()\n\ndef frequence_meilleure_vente(data, top=10, ascending=False):\n    resultat = pd.crosstab(\n        [data['Gender'], data['Product_Category']], \n        'Total vente', \n        values=data['Total_price'], \n        aggfunc= lambda x : len(x), \n        rownames=['Sexe', 'Categorie du produit'],\n        colnames=['']\n    ).reset_index().groupby(\n        ['Sexe'], as_index=False, group_keys=True\n    ).apply(\n        lambda x: x.sort_values('Total vente', ascending=ascending).iloc[:top, :]\n    ).reset_index(drop=True).set_index(['Sexe', 'Categorie du produit'])\n\n    return resultat\n\ndef indicateur_du_mois(data, current_month = 12, freq=True, abbr=False): \n    previous_month = current_month - 1 if current_month > 1 else 12\n    if freq : \n        resultat = data['Month'][(data['Month'] == current_month) | (data['Month'] == previous_month)].value_counts()\n        # sort by index\n        resultat = resultat.sort_index()\n        resultat.index = [(month_abbr[i] if abbr else month_name[i]) for i in resultat.index]\n        return resultat\n    else:\n        resultat = data[(data['Month'] == current_month) | (data['Month'] == previous_month)].groupby('Month').apply(calculer_chiffre_affaire)\n        resultat.index = [(month_abbr[i] if abbr else month_name[i]) for i in resultat.index]\n        return resultat\n\n# Barplot top 10 ventes\ndef barplot_top_10_ventes(data) :\n    df_plot = frequence_meilleure_vente(data, ascending=True)\n    graph = px.bar(\n        df_plot,\n        x='Total vente', \n        y=df_plot.index.get_level_values(1),\n        color=df_plot.index.get_level_values(0), \n        barmode='group',\n        title=\"Frequence des 10 meilleures ventes\",\n        labels={\"x\": \"Fréquence\", \"y\": \"Categorie du produit\", \"color\": \"Sexe\"},\n        width=680, height=600\n    ).update_layout(\n        margin = dict(t=60)\n    )\n    return graph\n   \n# Evolution chiffre d'affaire\ndef plot_evolution_chiffre_affaire(data) :\n    df_plot = data.groupby(pd.Grouper(key='Transaction_Date', freq='W')).apply(calculer_chiffre_affaire)[:-1]\n    chiffre_evolution = px.line(\n        x=df_plot.index, y=df_plot,\n        title=\"Evolution du chiffre d'affaire par semaine\",\n        labels={\"x\": \"Semaine\", \"y\": \"Chiffre d'affaire\"},\n    ).update_layout( \n        width=1000, height=400,\n        margin=dict(t=60, b=0),\n        \n    )\n    return chiffre_evolution\n\n## Chiffre d'affaire du mois\ndef plot_chiffre_affaire_mois(data) :\n    df_plot = indicateur_du_mois(data, freq=False)\n    indicateur = go.Figure(\n        go.Indicator(\n            mode = \"number+delta\",\n            value = df_plot[1],\n            delta = {'reference': df_plot[0]},\n            domain = {'row': 0, 'column': 1},\n            title=f\"{df_plot.index[1]}\",\n        )\n    ).update_layout(\n        width=200, height=200, \n        margin=dict(l=0, r=20, t=20, b=0)\n    )\n    return indicateur\n\n# Ventes du mois\ndef plot_vente_mois(data, abbr=False) :\n    df_plot = indicateur_du_mois(data, freq=True, abbr=abbr)\n    indicateur = go.Figure(\n        go.Indicator(\n            mode = \"number+delta\",\n            value = df_plot[1],\n            delta = {'reference': df_plot[0]},\n            domain = {'row': 0, 'column': 1},\n            title=f\"{df_plot.index[1]}\",\n        )\n    ).update_layout( \n        width=200, height=200, \n        margin=dict(l=0, r=20, t=20, b=0)\n    )\n    return indicateur\n\n###La strcuture de la maquette \n\napp=dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\nNEW_STYLE = {\n    \"display\": \"flex\",\n    \"justify-content\": \"center\",\n    \"align-items\": \"center\",\n    \"margin-bottom\": \"10px\", \n}\n\napp.layout = html.Div(children=[\n\n    #header \n    dbc.Row(children=[\n        dbc.Col(width=6, children=[\n            html.H1(children='ECAP Store'),\n        ]),\n        dbc.Col(width=6, children=[\n                    dcc.Dropdown(\n                        id='Choississez des zones',\n                        multi=True,\n                        options=[{'value' : loc, 'label' : loc} for loc in df['Location'].dropna().unique()],\n                        placeholder=\"Choississez des zones\",\n                        style={'width': '100%', 'margin':  '10px 0'},\n            ),\n        ]),\n    ],  \n            style = {'background-color':'lightblue', 'margin-bottom':'30px'}),\n    \n\n    #Body\n    dbc.Row(children=[\n\n    #left column\n    dbc.Col(width=6, children=[\n\n        #Row of indicators\n        dbc.Row(children=[\n            dbc.Col(width=6, children=[\n                html.Div(children=[\n                    dcc.Graph(id='ind-1')\n                ]),\n                ],\n                style={**NEW_STYLE, \n                  }\n            ),\n            dbc.Col(width=6, children=[\n                html.Div(children=[\n                    dcc.Graph(id='ind-2')\n                ]),\n            ],\n                style={\n                    **NEW_STYLE,\n                }\n            )\n        ]),\n\n        #Row of barplot\n        dbc.Row(children=[\n            html.Div(children=[\n                dcc.Graph(id=\"ind-3\")\n            ]),\n        ]),\n    ]),  \n\n    # Right column\n    dbc.Col(width=6, children=[\n\n        # Row of indicators\n        dbc.Row(children=[\n            html.Div(children=[\n                dcc.Graph(id=\"ind-4\")\n            ]),\n        ], style={\n            **NEW_STYLE,\n            'min-height': '300px',\n            'margin': '5px'\n        }),\n\n        # Row of barplot\n        dbc.Row(children=[\n            html.H3(\"Table des 100 dernières ventes\", style={'textAlign': 'left', 'fontSize': '18px'}),\n            html.Div(dash_table.DataTable(id=\"ind-5\",\n                                          page_size=10,\n                                          style_table={'width': '625px', 'height': '350px', 'overflowY': 'auto'},\n                                          style_header={'backgroundColor': 'lightgrey'},  \n                                          style_cell={'textAlign': 'right'},\n                                         )),\n        ]),\n    ]),\n    ])\n    ])\n\n#Callbacks\n@callback(\n    Output(\"ind-1\", \"figure\"),\n    Output(\"ind-2\", \"figure\"),\n    Output(\"ind-3\", \"figure\"),\n    Output(\"ind-4\", \"figure\"),\n    Output(\"ind-5\", \"data\"),\n    Input(\"Choississez des zones\", \"value\"),\n)\n\n#Mettre à jour les figures en fonction de la zone \ndef update_indicators(locations):\n    df_filtered = df[df['Location'].isin(locations)] if locations else df\n    fig_chiffre_affaire = plot_chiffre_affaire_mois(df_filtered)\n    fig_ventes = plot_vente_mois(df_filtered)\n    bar_ventes = barplot_top_10_ventes(df_filtered)\n    evolution_affaires = plot_evolution_chiffre_affaire(df_filtered)\n    table_data = table_ventes(df_filtered)\n    \n    #Modifier la taille des figures\n    fig_chiffre_affaire.update_layout(width=160, height=160)\n    fig_ventes.update_layout(width=160, height=160)\n    bar_ventes.update_layout(width=550, height=500)\n    evolution_affaires.update_layout(width=675, height=275)\n\n    return fig_chiffre_affaire, fig_ventes, bar_ventes, evolution_affaires, table_data\n    \n\nif __name__ == '__main__': \n    app.run(debug=True, port=8051, jupyter_mode=\"external\")\n```\n:::\n\n\n**Output:**\n\n![](images/Capture%20d'écran%202024-09-02%20171839.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}