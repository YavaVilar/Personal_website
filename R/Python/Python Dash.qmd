---
title: "Python Dash: Making interactive presentations"
date: "04/01/2024"
author: Yava Vilar Valera
---

Python Dash, developed by Plotly, allows us to create interactive web applications and visualize data. Below you will find an example of a coded model using a given database on the sales of a company alongside its resulting outputs, which, when executed with Python, provide interactive and dynamic graphics.

```{r, eval=FALSE}

import dash 
from dash import Input, Output, html, callback, dcc
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from calendar import month_abbr, month_name
import plotly.express as px
from dash import dash_table

#Télécharger la base de données 
df = pd.read_csv("C:/Users/yavav/Downloads/data (1).csv", index_col=0)

#Traitement des données
df = df[['CustomerID', 'Gender', 'Location', 'Product_Category', 'Quantity', 'Avg_Price', 'Transaction_Date', 'Month', 'Discount_pct']]

df['CustomerID'] = df['CustomerID'].fillna(0).astype(int)
df['Transaction_Date'] = pd.to_datetime(df['Transaction_Date'])

df['Total_price'] = df['Quantity'] * df['Avg_Price'] * (1 - (df['Discount_pct'] / 100)).round(3)

#Création de la table des 100 dernières ventes
def table_ventes(data):
    table_ventes = data[['Transaction_Date', 'Gender', 'Location', 'Product_Category', 'Quantity', 'Avg_Price', 'Discount_pct']].copy()
    table_ventes['Date'] = table_ventes['Transaction_Date'].dt.date
    table_ventes = table_ventes[['Date', 'Gender', 'Location', 'Product_Category', 'Quantity', 'Avg_Price', 'Discount_pct']]
    table_ventes = table_ventes.sort_values(by='Date', ascending=False).head(100)
    return table_ventes.to_dict('records')
   
colonnes = [
    {'name': 'Transaction_Date', 'id': 'Transaction_Date'},
    {'name': 'Gender', 'id': 'Gender'},
    {'name': 'Location', 'id': 'Location'},
    {'name': 'Product_Category', 'id': 'Product Category'},
    {'name': 'Quantity', 'id': 'Quantity'},
    {'name': 'Avg_Price', 'id': 'Avg_Price'},
    {'name': 'Discount_pct', 'id': 'Discount_pct'}
]

#Définition des fonctions qui seront ensuites appelées
def calculer_chiffre_affaire(data):
    return data['Total_price'].sum()

def frequence_meilleure_vente(data, top=10, ascending=False):
    resultat = pd.crosstab(
        [data['Gender'], data['Product_Category']], 
        'Total vente', 
        values=data['Total_price'], 
        aggfunc= lambda x : len(x), 
        rownames=['Sexe', 'Categorie du produit'],
        colnames=['']
    ).reset_index().groupby(
        ['Sexe'], as_index=False, group_keys=True
    ).apply(
        lambda x: x.sort_values('Total vente', ascending=ascending).iloc[:top, :]
    ).reset_index(drop=True).set_index(['Sexe', 'Categorie du produit'])

    return resultat

def indicateur_du_mois(data, current_month = 12, freq=True, abbr=False): 
    previous_month = current_month - 1 if current_month > 1 else 12
    if freq : 
        resultat = data['Month'][(data['Month'] == current_month) | (data['Month'] == previous_month)].value_counts()
        # sort by index
        resultat = resultat.sort_index()
        resultat.index = [(month_abbr[i] if abbr else month_name[i]) for i in resultat.index]
        return resultat
    else:
        resultat = data[(data['Month'] == current_month) | (data['Month'] == previous_month)].groupby('Month').apply(calculer_chiffre_affaire)
        resultat.index = [(month_abbr[i] if abbr else month_name[i]) for i in resultat.index]
        return resultat

# Barplot top 10 ventes
def barplot_top_10_ventes(data) :
    df_plot = frequence_meilleure_vente(data, ascending=True)
    graph = px.bar(
        df_plot,
        x='Total vente', 
        y=df_plot.index.get_level_values(1),
        color=df_plot.index.get_level_values(0), 
        barmode='group',
        title="Frequence des 10 meilleures ventes",
        labels={"x": "Fréquence", "y": "Categorie du produit", "color": "Sexe"},
        width=680, height=600
    ).update_layout(
        margin = dict(t=60)
    )
    return graph
   
# Evolution chiffre d'affaire
def plot_evolution_chiffre_affaire(data) :
    df_plot = data.groupby(pd.Grouper(key='Transaction_Date', freq='W')).apply(calculer_chiffre_affaire)[:-1]
    chiffre_evolution = px.line(
        x=df_plot.index, y=df_plot,
        title="Evolution du chiffre d'affaire par semaine",
        labels={"x": "Semaine", "y": "Chiffre d'affaire"},
    ).update_layout( 
        width=1000, height=400,
        margin=dict(t=60, b=0),
        
    )
    return chiffre_evolution

## Chiffre d'affaire du mois
def plot_chiffre_affaire_mois(data) :
    df_plot = indicateur_du_mois(data, freq=False)
    indicateur = go.Figure(
        go.Indicator(
            mode = "number+delta",
            value = df_plot[1],
            delta = {'reference': df_plot[0]},
            domain = {'row': 0, 'column': 1},
            title=f"{df_plot.index[1]}",
        )
    ).update_layout(
        width=200, height=200, 
        margin=dict(l=0, r=20, t=20, b=0)
    )
    return indicateur

# Ventes du mois
def plot_vente_mois(data, abbr=False) :
    df_plot = indicateur_du_mois(data, freq=True, abbr=abbr)
    indicateur = go.Figure(
        go.Indicator(
            mode = "number+delta",
            value = df_plot[1],
            delta = {'reference': df_plot[0]},
            domain = {'row': 0, 'column': 1},
            title=f"{df_plot.index[1]}",
        )
    ).update_layout( 
        width=200, height=200, 
        margin=dict(l=0, r=20, t=20, b=0)
    )
    return indicateur

###La strcuture de la maquette 

app=dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])

NEW_STYLE = {
    "display": "flex",
    "justify-content": "center",
    "align-items": "center",
    "margin-bottom": "10px", 
}

app.layout = html.Div(children=[

    #header 
    dbc.Row(children=[
        dbc.Col(width=6, children=[
            html.H1(children='ECAP Store'),
        ]),
        dbc.Col(width=6, children=[
                    dcc.Dropdown(
                        id='Choississez des zones',
                        multi=True,
                        options=[{'value' : loc, 'label' : loc} for loc in df['Location'].dropna().unique()],
                        placeholder="Choississez des zones",
                        style={'width': '100%', 'margin':  '10px 0'},
            ),
        ]),
    ],  
            style = {'background-color':'lightblue', 'margin-bottom':'30px'}),
    

    #Body
    dbc.Row(children=[

    #left column
    dbc.Col(width=6, children=[

        #Row of indicators
        dbc.Row(children=[
            dbc.Col(width=6, children=[
                html.Div(children=[
                    dcc.Graph(id='ind-1')
                ]),
                ],
                style={**NEW_STYLE, 
                  }
            ),
            dbc.Col(width=6, children=[
                html.Div(children=[
                    dcc.Graph(id='ind-2')
                ]),
            ],
                style={
                    **NEW_STYLE,
                }
            )
        ]),

        #Row of barplot
        dbc.Row(children=[
            html.Div(children=[
                dcc.Graph(id="ind-3")
            ]),
        ]),
    ]),  

    # Right column
    dbc.Col(width=6, children=[

        # Row of indicators
        dbc.Row(children=[
            html.Div(children=[
                dcc.Graph(id="ind-4")
            ]),
        ], style={
            **NEW_STYLE,
            'min-height': '300px',
            'margin': '5px'
        }),

        # Row of barplot
        dbc.Row(children=[
            html.H3("Table des 100 dernières ventes", style={'textAlign': 'left', 'fontSize': '18px'}),
            html.Div(dash_table.DataTable(id="ind-5",
                                          page_size=10,
                                          style_table={'width': '625px', 'height': '350px', 'overflowY': 'auto'},
                                          style_header={'backgroundColor': 'lightgrey'},  
                                          style_cell={'textAlign': 'right'},
                                         )),
        ]),
    ]),
    ])
    ])

#Callbacks
@callback(
    Output("ind-1", "figure"),
    Output("ind-2", "figure"),
    Output("ind-3", "figure"),
    Output("ind-4", "figure"),
    Output("ind-5", "data"),
    Input("Choississez des zones", "value"),
)

#Mettre à jour les figures en fonction de la zone 
def update_indicators(locations):
    df_filtered = df[df['Location'].isin(locations)] if locations else df
    fig_chiffre_affaire = plot_chiffre_affaire_mois(df_filtered)
    fig_ventes = plot_vente_mois(df_filtered)
    bar_ventes = barplot_top_10_ventes(df_filtered)
    evolution_affaires = plot_evolution_chiffre_affaire(df_filtered)
    table_data = table_ventes(df_filtered)
    
    #Modifier la taille des figures
    fig_chiffre_affaire.update_layout(width=160, height=160)
    fig_ventes.update_layout(width=160, height=160)
    bar_ventes.update_layout(width=550, height=500)
    evolution_affaires.update_layout(width=675, height=275)

    return fig_chiffre_affaire, fig_ventes, bar_ventes, evolution_affaires, table_data
    

if __name__ == '__main__': 
    app.run(debug=True, port=8051, jupyter_mode="external")
```

**Output:**

![](images/Capture%20d'écran%202024-09-02%20171839.png)
